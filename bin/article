#!/usr/bin/env perl

# vim ft=perl

use lib 'lib';
use Less::Script;
use File::Spec::Functions qw(catfile);

GetOptions( \my %opt_for, 'nocomments' )
  or die "Bad options";

my $comments = $opt_for{nocomments} ? 0 : 1;

croak("Usage: $0 Name of Article") unless @ARGV;

my $title    = join( ' ' => @ARGV );
my $slug     = make_slug($title);
my $template = write_article_stub( $title, $slug, $comments );
add_to_sqitch( $title, $slug );
edit_article($template);    #exits this program

sub add_to_sqitch ( $title, $slug ) {
    my $dbh = dbh('prod');
    $title = $dbh->quote($title);
    my $q_slug = $dbh->quote($slug);
    my $deploy = <<"END";
-- Deploy ovid:data/$slug to sqlite

BEGIN;

    INSERT INTO articles (title, directory, slug, sort_order)
         VALUES ( $title, '/articles/', $q_slug, (SELECT max(sort_order) FROM articles) + 1 );

COMMIT;
END
    my $revert = <<"END";
-- Revert ovid:data/$slug to sqlite

BEGIN;

    DELETE FROM articles WHERE slug = $q_slug;

COMMIT;
END
    system( 'sqitch', 'add', "data/$slug" );
    splat( "sqitch/deploy/data/$slug.sql", $deploy );
    splat( "sqitch/revert/data/$slug.sql", $revert );
    system('sqitch', 'deploy', 'ovid');
}

sub write_article_stub ( $title, $slug, $comments ) {
    my $contents = template( $title, "articles/$slug", $comments );

    my $template = catfile( 'root', 'articles', "$slug.tt" );

    if ( -e $template ) {
        say "Refusing to overwrite the existing file at $template. Exiting.";
        exit 1;
    }

    open my $fh, '>', $template;
    print {$fh} $contents;
    close $fh;
    return $template;
}

sub edit_article ($template) {
    my $editor = $ENV{EDITOR} || 'vim';
    system $editor => $template;
}

sub template ( $title, $identifier, $comments = 1 ) {
    return sprintf <<'END' => $title, $identifier, $comments;
[%%
    title            = '%s';
    identifier       = '%s';
    include_comments = %d;
    syntax_highlight = 1;
    USE Ovid;
%%]
[%% WRAPPER include/wrapper.tt markdown=1 -%%]

<!-- add HTML/markdown content here -->

[%%- END %%]
END
}

sub usage {
    return "$0 'My Awesome Title' --nocomments";
}

__END__

=head1 NAME

article - Write an article

=head1 SYNOPSIS

    perl bin/article My Awesome Article
    perl bin/article My Awesome Article --nocomments

=head1 OPTIONS

    nocomments        If passed, comments are disabled for this article
