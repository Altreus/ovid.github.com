#!/usr/bin/env perl

# vim ft=perl

use lib 'lib';
use File::Spec::Functions qw(catfile);
use DateTime;
use Less::Script;

GetOptions( \my %opt_for, 'nocomments', 'type=s' )
  or die "Bad options";

my $comments = $opt_for{nocomments} ? 0 : 1;
$opt_for{comments} = $comments;

unless ( 'article' eq $opt_for{type} xor 'blog' eq $opt_for{type} ) {
    die "--type is required and must be one of 'article' or 'blog'";
}

croak("Usage: $0 Name of Article") unless @ARGV;

my $title    = join( ' ' => @ARGV );
my $slug     = make_slug($title);
my $template = write_article_stub( $title, $slug, \%opt_for );
add_to_sqitch( $title, $slug, \%opt_for );
edit_article($template);    #exits this program

sub add_to_sqitch ( $title, $slug, $opt_for ) {
    my $dbh = dbh('prod');
    $title = $dbh->quote($title);
    my $q_slug = $dbh->quote($slug);
    my $type   = $dbh->quote( $opt_for->{type} );
    my $deploy = <<"END";
-- Deploy ovid:data/$slug to sqlite

BEGIN;

    INSERT INTO articles (title, slug, article_type_id, sort_order)
         VALUES (
           $title,
           $q_slug,
           (SELECT article_type_id FROM article_types WHERE type = $type),
           (SELECT max(sort_order) FROM articles) + 1 
         );

COMMIT;
END
    my $revert = <<"END";
-- Revert ovid:data/$slug to sqlite

BEGIN;

    DELETE FROM articles WHERE slug = $q_slug AND article_type_id = (SELECT article_type_id FROM article_types WHERE type = $type);

COMMIT;
END
    system( 'sqitch', 'add', "data/$slug" );
    splat( "sqitch/deploy/data/$slug.sql", $deploy );
    splat( "sqitch/revert/data/$slug.sql", $revert );
    system( 'sqitch', 'deploy', 'ovid' );
}

sub write_article_stub ( $title, $slug, $opt_for ) {
    my $directory = article_type( $opt_for->{type} )->{directory};
    my $contents = template( $title, "$directory/$slug", $opt_for->{comments} );
    my $template = catfile( 'root', $directory, "$slug.tt" );

    if ( -e $template ) {
        say "Refusing to overwrite the existing file at $template. Exiting.";
        exit 1;
    }

    open my $fh, '>', $template;
    print {$fh} $contents;
    close $fh;
    return $template;
}

sub edit_article ($template) {
    my $editor = $ENV{EDITOR} || 'vim';
    system $editor => $template;
}

sub template ( $title, $identifier, $comments = 1 ) {
    my $ymd = DateTime->now->ymd;
    return sprintf <<'END' => $title, $identifier, $comments, $ymd;
[%%
    title            = '%s';
    identifier       = '%s';
    include_comments = %d;
    syntax_highlight = 1;
    date             = '%s';
    USE Ovid;
%%]
[%% WRAPPER include/wrapper.tt markdown=1 -%%]

<!-- add HTML/markdown content here -->

[%%- END %%]
END
}

sub usage {
    return "$0 'My Awesome Title' --nocomments";
}

__END__

=head1 NAME

article - Write an article

=head1 SYNOPSIS

    perl bin/article --type=article My Awesome Article
    perl bin/article --type=blog My Awesome Article --nocomments

=head1 OPTIONS

    nocomments        If passed, comments are disabled for this article
    type              Must be one of 'article' or 'blog'
