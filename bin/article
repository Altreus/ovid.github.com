#!/usr/bin/env perl

# vim ft=perl

use lib 'lib';
use Less::Boilerplate;
use Text::Unidecode;
use String::Util 'trim';
use Getopt::Long;
use File::Spec::Functions qw(catfile);

GetOptions( \my %opt_for, 'nocomments' )
  or die "Bad options";

my $comments = $opt_for{nocomments} ? 0 : 1;
my $title    = join( ' ' => @ARGV ) || croak( usage() );
my $slug     = make_slug($title);
my $template = write_article_stub( $title, $slug, $comments );
add_to_article_list( $title, $slug );
edit_article($template);    # exits this program

sub add_to_article_list ( $title, $slug ) {
    open my $fh, '+<', 'root/articles.tt';
    my $contents = do { local $/; <$fh> };

    # We're just going to pretend you didn't see this.
    my $link = qq{<li><a href="/articles/$slug.html">$title</a></li>};
    $contents =~ s/(<ul id="articles">)/$1\n    $link/;
    seek $fh, 0, 0;
    print {$fh} $contents;
    close $fh;
}

sub write_article_stub ( $title, $slug, $comments ) {
    my $contents = template( $title, "articles/$slug", $comments );

    my $template = catfile( 'root', 'articles', "$slug.tt" );

    if ( -e $template ) {
        say "Refusing to overwrite the existing file at $template. Exiting.";
        exit 1;
    }

    open my $fh, '>', $template;
    print {$fh} $contents;
    close $fh;
    return $template;
}

sub edit_article ($template) {
    my $editor = $ENV{EDITOR} || 'vim';
    system $editor => $template;
}

sub template ( $title, $identifier, $comments = 1 ) {
    return sprintf <<'END' => $title, $identifier, $comments;
[%%
    title            = '%s';
    identifier       = '%s';
    include_comments = %d;
    syntax_highlight = 0;
    USE Ovid;
    INCLUDE include/header.tt;
%%]

<!-- add HTML content here -->

[%% INCLUDE include/footer.tt %%]
END
}

sub make_slug ($name) {

    # XXX bugs waiting to happen
    $name = trim( lc( unidecode($name) ) );
    $name =~ s/\s+/_/g;
    $name =~ tr/-/_/;
    $name =~ s/__*/_/g;
    $name =~ s/\W//g;
    $name =~ tr/_/-/;
    $name =~ s/--/-/g;
    return $name;
}

sub usage {
    return "$0 'My Awesome Title' --nocomments";
}

__END__

=head1 NAME

article - Write an article

=head1 SYNOPSIS

    perl bin/article My Awesome Article
    perl bin/article My Awesome Article --nocomments

=head1 OPTIONS

    nocomments        If passed, comments are disabled for this article
